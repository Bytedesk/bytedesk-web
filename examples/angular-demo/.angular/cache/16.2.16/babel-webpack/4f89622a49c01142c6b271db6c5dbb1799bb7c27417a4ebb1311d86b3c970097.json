{"ast":null,"code":"class BytedeskWeb {\n  constructor(config) {\n    this.bubble = null;\n    this.window = null;\n    this.isVisible = false;\n    this.isDragging = false;\n    this.windowState = 'normal';\n    this.config = {\n      ...this.getDefaultConfig(),\n      ...config\n    };\n  }\n  getDefaultConfig() {\n    return {\n      baseUrl: 'https://www.weiyuai.cn/chat',\n      placement: 'bottom-right',\n      marginBottom: 20,\n      marginSide: 20,\n      tabsConfig: {\n        home: false,\n        messages: true,\n        help: false,\n        news: false\n      },\n      bubbleConfig: {\n        show: true,\n        icon: '👋',\n        title: '需要帮助吗？',\n        subtitle: '点击开始对话'\n      },\n      showSupport: true,\n      chatConfig: {\n        org: 'df_org_uid',\n        t: \"2\",\n        sid: 'df_rt_uid'\n      },\n      animation: {\n        enabled: true,\n        duration: 300,\n        type: 'ease'\n      },\n      theme: {\n        mode: 'system',\n        textColor: '#ffffff',\n        backgroundColor: '#0066FF'\n      },\n      window: {\n        width: 380,\n        height: 640\n      },\n      draggable: false,\n      locale: 'zh-CN'\n    };\n  }\n  init() {\n    this.createBubble();\n    this.setupMessageListener();\n    this.setupResizeListener();\n  }\n  createBubble() {\n    // 创建气泡容器\n    const container = document.createElement('div');\n    container.style.cssText = `\n      position: fixed;\n      ${this.config.placement === 'bottom-left' ? 'left' : 'right'}: ${this.config.marginSide}px;\n      bottom: ${this.config.marginBottom}px;\n      display: flex;\n      flex-direction: column;\n      align-items: ${this.config.placement === 'bottom-left' ? 'flex-start' : 'flex-end'};\n      gap: 10px;\n      z-index: 9999;\n    `;\n    // 创建气泡消息\n    let messageElement = null;\n    if (this.config.bubbleConfig?.show) {\n      messageElement = document.createElement('div');\n      messageElement.style.cssText = `\n        background: white;\n        padding: 12px 16px;\n        border-radius: 8px;\n        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n        max-width: 220px;\n        margin-bottom: 8px;\n        opacity: 0;\n        transform: translateY(10px);\n        transition: all 0.3s ease;\n        position: relative;\n      `;\n      // 添加图标和文本\n      const messageContent = document.createElement('div');\n      messageContent.style.cssText = `\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      `;\n      const iconSpan = document.createElement('span');\n      iconSpan.textContent = this.config.bubbleConfig?.icon || '';\n      iconSpan.style.fontSize = '20px';\n      messageContent.appendChild(iconSpan);\n      const textDiv = document.createElement('div');\n      const title = document.createElement('div');\n      title.textContent = this.config.bubbleConfig?.title || '';\n      title.style.fontWeight = 'bold';\n      title.style.marginBottom = '4px';\n      textDiv.appendChild(title);\n      const subtitle = document.createElement('div');\n      subtitle.textContent = this.config.bubbleConfig?.subtitle || '';\n      subtitle.style.fontSize = '0.9em';\n      subtitle.style.opacity = '0.8';\n      textDiv.appendChild(subtitle);\n      messageContent.appendChild(textDiv);\n      messageElement.appendChild(messageContent);\n      // 添加倒三角\n      const triangle = document.createElement('div');\n      triangle.style.cssText = `\n        position: absolute;\n        bottom: -6px;\n        ${this.config.placement === 'bottom-left' ? 'left: 24px' : 'right: 24px'};\n        width: 12px;\n        height: 12px;\n        background: white;\n        transform: rotate(45deg);\n        box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n      `;\n      // 添加一个白色背景遮罩，遮住三角形上方的阴影\n      const mask = document.createElement('div');\n      mask.style.cssText = `\n        position: absolute;\n        bottom: 0;\n        ${this.config.placement === 'bottom-left' ? 'left: 18px' : 'right: 18px'};\n        width: 24px;\n        height: 12px;\n        background: white;\n      `;\n      messageElement.appendChild(triangle);\n      messageElement.appendChild(mask);\n      container.appendChild(messageElement);\n      // 显示动画\n      setTimeout(() => {\n        if (messageElement) {\n          messageElement.style.opacity = '1';\n          messageElement.style.transform = 'translateY(0)';\n        }\n      }, 500);\n    }\n    // 创建按钮\n    this.bubble = document.createElement('button');\n    this.bubble.style.cssText = `\n      background-color: ${this.config.theme?.backgroundColor};\n      width: 60px;\n      height: 60px;\n      border-radius: 30px;\n      border: none;\n      cursor: ${this.config.draggable ? 'move' : 'pointer'};\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);\n      transition: all 0.3s ease;\n      outline: none;\n      position: relative;\n      user-select: none;\n    `;\n    // 添加气泡图标\n    const bubbleIcon = document.createElement('div');\n    bubbleIcon.innerHTML = `\n      <svg width=\"28\" height=\"28\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 14.663 3.04094 17.0829 4.73812 18.875L2.72681 21.1705C2.44361 21.4937 2.67314 22 3.10288 22H12Z\" \n              fill=\"white\"/>\n      </svg>\n    `;\n    bubbleIcon.style.cssText = `\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `;\n    this.bubble.appendChild(bubbleIcon);\n    // 添加悬停效果\n    this.bubble.addEventListener('mouseenter', () => {\n      this.bubble.style.transform = 'scale(1.1)';\n    });\n    this.bubble.addEventListener('mouseleave', () => {\n      this.bubble.style.transform = 'scale(1)';\n    });\n    // 先将按钮添加到容器\n    container.appendChild(this.bubble);\n    // 只有在 draggable 为 true 时才添加拖拽功能\n    if (this.config.draggable) {\n      let startX = 0;\n      let startY = 0;\n      let initialX = 0;\n      let initialY = 0;\n      this.bubble.addEventListener('mousedown', e => {\n        if (e.button !== 0) return;\n        this.isDragging = true;\n        startX = e.clientX;\n        startY = e.clientY;\n        initialX = container.offsetLeft;\n        initialY = container.offsetTop;\n        container.style.transition = 'none';\n      });\n      document.addEventListener('mousemove', e => {\n        if (!this.isDragging) return;\n        e.preventDefault();\n        const dx = e.clientX - startX;\n        const dy = e.clientY - startY;\n        const newX = initialX + dx;\n        const newY = initialY + dy;\n        // 限制在视窗范围内\n        //       const maxX = window.innerWidth - container.offsetWidth;\n        const maxY = window.innerHeight - container.offsetHeight;\n        // 更新水平位置\n        if (newX <= window.innerWidth / 2) {\n          // 靠左\n          container.style.left = `${Math.max(0, newX)}px`;\n          container.style.right = 'auto';\n          this.config.placement = 'bottom-left';\n        } else {\n          // 靠右\n          container.style.right = `${Math.max(0, window.innerWidth - newX - container.offsetWidth)}px`;\n          container.style.left = 'auto';\n          this.config.placement = 'bottom-right';\n        }\n        // 更新垂直位置\n        container.style.bottom = `${Math.min(Math.max(0, window.innerHeight - newY - container.offsetHeight), maxY)}px`;\n      });\n      document.addEventListener('mouseup', () => {\n        if (!this.isDragging) return;\n        this.isDragging = false;\n        // 恢复过渡动画\n        container.style.transition = 'all 0.3s ease';\n        // 保存新位置\n        this.config.marginSide = parseInt(this.config.placement === 'bottom-left' ? container.style.left : container.style.right) || 20;\n        this.config.marginBottom = parseInt(container.style.bottom || '20');\n      });\n    }\n    // 修改点击事件，只在非拖动时触发\n    // let isClick = true;\n    this.bubble.addEventListener('mousedown', () => {\n      //   isClick = true;\n    });\n    this.bubble.addEventListener('mousemove', () => {\n      //   isClick = false;\n    });\n    this.bubble.addEventListener('click', () => {\n      if (!this.isDragging) {\n        this.showChat();\n      }\n    });\n    // 保存气泡消息引用\n    this.bubble.messageElement = messageElement;\n    // 最后将容器添加到 body\n    document.body.appendChild(container);\n  }\n  getSupportText() {\n    const locale = this.config.locale || 'zh-CN';\n    const supportTexts = {\n      'zh-CN': '微语技术支持',\n      'en-US': 'Powered by Weiyuai',\n      'ja-JP': 'Weiyuaiによる技術支援',\n      'ko-KR': 'Weiyuai 기술 지원'\n    };\n    return supportTexts[locale] || supportTexts['zh-CN'];\n  }\n  createChatWindow() {\n    this.window = document.createElement('div');\n    const isMobile = window.innerWidth <= 768;\n    const maxWidth = window.innerWidth;\n    const maxHeight = window.innerHeight;\n    // 计算合适的窗口尺寸\n    const width = Math.min(this.config.window?.width || maxWidth * 0.9, maxWidth * 0.9);\n    const height = Math.min(this.config.window?.height || maxHeight * 0.9, maxHeight * 0.9);\n    if (isMobile) {\n      this.window.style.cssText = `\n        position: fixed;\n        left: 0;\n        bottom: 0;\n        width: 100%;\n        height: 90vh;\n        display: none;\n        z-index: 10000;\n        border-top-left-radius: 12px;\n        border-top-right-radius: 12px;\n        overflow: hidden;\n        transition: all ${this.config.animation?.duration}ms ${this.config.animation?.type};\n      `;\n    } else {\n      // 修复桌面端样式 - 使用正确的位置属性\n      this.window.style.cssText = `\n        position: fixed;\n        ${this.config.placement === 'bottom-right' ? 'right' : 'left'}: ${this.config.marginSide}px;\n        bottom: ${this.config.marginBottom}px;\n        width: ${width}px;\n        height: ${height}px;\n        border-radius: 12px;\n        box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);\n        display: none;\n        overflow: hidden;\n        z-index: 10000;\n        transition: all ${this.config.animation?.duration}ms ${this.config.animation?.type};\n      `;\n    }\n    // 创建聊天界面\n    const iframe = document.createElement('iframe');\n    iframe.style.cssText = `\n      width: 100%;\n      height: ${this.config.showSupport ? 'calc(100% - 30px)' : '100%'};\n      border: none;\n    `;\n    iframe.src = this.generateChatUrl();\n    this.window.appendChild(iframe);\n    // 添加技术支持信息\n    if (this.config.showSupport) {\n      const supportDiv = document.createElement('div');\n      supportDiv.style.cssText = `\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: #666;\n        font-size: 12px;\n        line-height: 30px;\n      `;\n      supportDiv.innerHTML = `\n        <a href=\"https://ai.bytedesk.com\" \n           target=\"_blank\" \n           style=\"\n             color: #666;\n             text-decoration: none;\n             display: flex;\n             align-items: center;\n             height: 100%;\n           \">\n          ${this.getSupportText()}\n        </a>\n      `;\n      this.window.appendChild(supportDiv);\n    }\n    document.body.appendChild(this.window);\n  }\n  generateChatUrl(tab = 'messages') {\n    console.log('this.config: ', this.config, tab);\n    const params = new URLSearchParams();\n    // 添加聊天参数\n    Object.entries(this.config.chatConfig || {}).forEach(([key, value]) => {\n      params.append(key, String(value));\n    });\n    // 添加基本参数\n    // params.append('tab', tab);\n    // params.append('theme', JSON.stringify(this.config.theme));\n    // params.append('window', JSON.stringify(this.config.window));\n    // theme添加聊天参数\n    Object.entries(this.config.theme || {}).forEach(([key, value]) => {\n      params.append(key, String(value));\n    });\n    let chatUrl = `${this.config.baseUrl}?${params.toString()}`;\n    console.log('chatUrl: ', chatUrl);\n    return chatUrl;\n  }\n  setupMessageListener() {\n    window.addEventListener('message', event => {\n      switch (event.data.type) {\n        case 'CLOSE_CHAT_WINDOW':\n          this.hideChat();\n          break;\n        case 'MAXIMIZE_WINDOW':\n          this.toggleMaximize();\n          break;\n        case 'MINIMIZE_WINDOW':\n          this.minimizeWindow();\n          break;\n      }\n    });\n  }\n  showChat() {\n    if (!this.window) {\n      this.createChatWindow();\n    }\n    if (this.window) {\n      const isMobile = window.innerWidth <= 768;\n      this.window.style.display = 'block';\n      this.setupResizeListener();\n      if (isMobile) {\n        if (this.window) {\n          this.window.style.transform = 'translateY(100%)';\n          requestAnimationFrame(() => {\n            if (this.window) {\n              this.window.style.transform = 'translateY(0)';\n            }\n          });\n        }\n      }\n      this.isVisible = true;\n      if (this.bubble) {\n        this.bubble.style.display = 'none';\n        const messageElement = this.bubble.messageElement;\n        if (messageElement instanceof HTMLElement) {\n          messageElement.style.display = 'none';\n        }\n      }\n    }\n  }\n  hideChat() {\n    if (this.window) {\n      const isMobile = window.innerWidth <= 768;\n      if (isMobile) {\n        this.window.style.transform = 'translateY(100%)';\n        setTimeout(() => {\n          if (this.window) {\n            this.window.style.display = 'none';\n          }\n        }, this.config.animation?.duration || 300);\n      } else {\n        this.window.style.display = 'none';\n      }\n      this.isVisible = false;\n      if (this.bubble) {\n        this.bubble.style.display = 'inline-flex';\n        const messageElement = this.bubble.messageElement;\n        if (messageElement instanceof HTMLElement) {\n          messageElement.style.display = 'block';\n        }\n      }\n    }\n  }\n  minimizeWindow() {\n    if (this.window) {\n      this.windowState = 'minimized';\n      this.window.style.display = 'none';\n    }\n  }\n  toggleMaximize() {\n    if (!this.window) return;\n    const isMobile = window.innerWidth <= 768;\n    if (isMobile) return;\n    this.windowState = this.windowState === 'maximized' ? 'normal' : 'maximized';\n    this.setupResizeListener();\n  }\n  setupResizeListener() {\n    const updateWindowSize = () => {\n      if (!this.window || !this.isVisible) return;\n      const isMobile = window.innerWidth <= 768;\n      const maxWidth = window.innerWidth;\n      const maxHeight = window.innerHeight;\n      if (isMobile) {\n        Object.assign(this.window.style, {\n          left: '0',\n          bottom: '0',\n          width: '100%',\n          height: '90vh',\n          borderTopLeftRadius: '12px',\n          borderTopRightRadius: '12px',\n          borderBottomLeftRadius: '0',\n          borderBottomRightRadius: '0'\n        });\n      } else {\n        let width = this.windowState === 'maximized' ? maxWidth : Math.min(this.config.window?.width || maxWidth * 0.9, maxWidth * 0.9);\n        let height = this.windowState === 'maximized' ? maxHeight : Math.min(this.config.window?.height || maxHeight * 0.9, maxHeight * 0.9);\n        // 确保窗口不会超出屏幕\n        const right = this.config.placement === 'bottom-right' ? this.config.marginSide : undefined;\n        const left = this.config.placement === 'bottom-left' ? this.config.marginSide : undefined;\n        Object.assign(this.window.style, {\n          width: `${width}px`,\n          height: `${height}px`,\n          right: right ? `${right}px` : 'auto',\n          left: left ? `${left}px` : 'auto',\n          bottom: `${this.config.marginBottom}px`,\n          borderRadius: this.windowState === 'maximized' ? '0' : '12px'\n        });\n      }\n    };\n    // 添加防抖\n    let resizeTimeout;\n    window.addEventListener('resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = window.setTimeout(updateWindowSize, 100);\n    });\n    // 初始更新\n    updateWindowSize();\n  }\n  destroy() {\n    // 找到气泡容器的父元素\n    const bubbleContainer = this.bubble?.parentElement;\n    if (bubbleContainer && document.body.contains(bubbleContainer)) {\n      document.body.removeChild(bubbleContainer);\n      this.bubble = null;\n    }\n    // 移除聊天窗口\n    if (this.window && document.body.contains(this.window)) {\n      document.body.removeChild(this.window);\n      this.window = null;\n    }\n    // 清理事件监听器\n    window.removeEventListener('resize', this.setupResizeListener.bind(this));\n  }\n}\nexport { BytedeskWeb as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}