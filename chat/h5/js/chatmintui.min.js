"use strict"; document.getElementById("app-wrapper").style.display = ""; var options = { fullscreenEl: !1 }; Vue.use(vuePhotoPreview, options); var messages = { en: { contactAgent: "contact agent", typing: "typing...", sendLink: "send link", agentChat: "agent chat", viewFile: "view file", arrived: "arrived", readed: "readed", leaveWord: "leave message", name: "name", inputName: "input name", mobile: "mobile", inputMobile: "input mobile", leaveContent: "leave content", email: "email", inputEmail: "input email", age: "age", inputAge: "input age", job: "job", inputJob: "input job", pleaseRate: "please rate", veryGood: "very good", good: "good", average: "average", notGood: "not good", bad: "very bad", submit: "submit", inviteRate: "invite rate", rateResult: "rated", rate: "rate", rateContent: "rate content", pleaseInput: "please input", rateAgain: "cant rate again", continueChat: "continue", agentCloseThread: "agent close thread", visitorCloseThread: "visitor close thread", autoCloseThread: "system close thread", agentOffline: "agent offline, please leave message", postScriptPrefix: "<postScript>:", send: "send" }, cn: { contactAgent: "联系客服", typing: "对方正在输入...", sendLink: "发送链接", agentChat: "人工客服", viewFile: "查看文件", arrived: "送达", readed: "已读", leaveWord: "留言", name: "姓名", inputName: "请输入姓名", mobile: "手机号", inputMobile: "请输入手机号", leaveContent: "留言内容", email: "邮箱", inputEmail: "请输入邮箱", age: "年龄", inputAge: "请输入年龄", job: "职业", inputJob: "请输入职业", pleaseRate: "请对我们服务做出评价", veryGood: "非常满意", good: "满意", average: "一般", notGood: "不满意", bad: "非常不满意", submit: "提交", inviteRate: "邀请评价", rateResult: "已评价", rate: "评价", rateContent: "评价内容", pleaseInput: "请输入", rateAgain: "不能重复评价", continueChat: "继续会话", agentCloseThread: "客服关闭会话", visitorCloseThread: "访客关闭会话", autoCloseThread: "长时间没有对话，系统自动关闭会话", agentOffline: "当前无客服在线，请留言", postScriptPrefix: "<附言>:", send: "发送" } }, i18n = new VueI18n({ locale: "cn", messages: messages }), app = new Vue({ el: "#app", i18n: i18n, name: "chatmintui", data: function () { return { IS_PRODUCTION: !0, HTTP_HOST: "https://www.bytedesk.com", STOMP_HOST: "https://www.bytedesk.com", title: "萝卜丝", isInputingVisible: !1, localPreviewContent: "", imageDialogVisible: !1, currentImageUrl: "", currentVoiceUrl: "", inputContent: "", messages: [], loadMoreVisible: !0, realname: "", mobile: "", email: "", age: 0, job: "", content: "", showRealname: !1, showMobile: !1, showEmail: !1, showAge: !1, showJob: !1, showContent: !1, isRated: !1, isInviteRate: !1, rateScore: 5, rateValue: "非常满意", rateContent: "", isLoading: !1, stompClient: "", sessionId: "", preSessionId: "", browseInviteBIid: "", access_token: "", passport: { token: { access_token: "" } }, adminUid: "", workGroupWid: "", subDomain: "", client: "web_h5", thread: { id: 0, tid: "" }, subscribedTopics: [], page: 0, last: !1, type: "workGroup", agentUid: "", uid: "", username: "", password: "", nickname: "", token: "bd_kfe_token", isConnected: !1, answers: [], isRobot: !1, isThreadStarted: !1, isThreadClosed: !1, isManulRequestThread: !1, leaveMessageTip: "", loadHistory: "1", postscript: "", showScript: !1, hideNav: !1, backUrl: "", topTip: "", showTopTip: !1, showMessage: !0, showInputBar: !0, showLeaveMessage: !1, showRate: !1, showForm: !1, lang: "cn", emotionBaseUrl: "https://chainsnow.oss-cn-shenzhen.aliyuncs.com/emojis/gif/", emotionMap: { "[微笑]": "100.gif", "[撇嘴]": "101.gif", "[色]": "102.gif", "[发呆]": "103.gif", "[得意]": "104.gif", "[流泪]": "105.gif", "[害羞]": "106.gif", "[闭嘴]": "107.gif", "[睡]": "108.gif", "[大哭]": "109.gif", "[尴尬]": "110.gif", "[发怒]": "111.gif", "[调皮]": "112.gif", "[呲牙]": "113.gif", "[惊讶]": "114.gif", "[难过]": "115.gif", "[酷]": "116.gif", "[冷汗]": "117.gif", "[抓狂]": "118.gif", "[吐]": "119.gif", "[偷笑]": "120.gif", "[愉快]": "121.gif", "[白眼]": "122.gif", "[傲慢]": "123.gif", "[饥饿]": "124.gif", "[困]": "125.gif", "[惊恐]": "126.gif", "[流汗]": "127.gif", "[憨笑]": "128.gif", "[悠闲]": "129.gif", "[奋斗]": "130.gif", "[咒骂]": "131.gif", "[疑问]": "132.gif", "[嘘]": "133.gif", "[晕]": "134.gif", "[疯了]": "135.gif", "[衰]": "136.gif", "[骷髅]": "137.gif", "[敲打]": "138.gif", "[再见]": "139.gif", "[擦汗]": "140.gif", "[抠鼻]": "141.gif", "[鼓掌]": "142.gif", "[糗大了]": "143.gif", "[坏笑]": "144.gif", "[左哼哼]": "145.gif", "[右哼哼]": "146.gif", "[哈欠]": "147.gif", "[鄙视]": "148.gif", "[委屈]": "149.gif", "[快哭]": "150.gif", "[阴险]": "151.gif", "[亲亲]": "152.gif", "[吓]": "153.gif", "[可怜]": "154.gif", "[菜刀]": "155.gif", "[西瓜]": "156.gif", "[啤酒]": "157.gif", "[篮球]": "158.gif", "[乒乓]": "159.gif", "[咖啡]": "160.gif", "[饭]": "161.gif", "[猪头]": "162.gif", "[玫瑰]": "163.gif", "[凋谢]": "164.gif", "[嘴唇]": "165.gif", "[爱心]": "166.gif", "[心碎]": "167.gif", "[蛋糕]": "168.gif", "[闪电]": "169.gif", "[炸弹]": "170.gif", "[刀]": "171.gif", "[足球]": "172.gif", "[瓢虫]": "173.gif", "[便便]": "174.gif", "[月亮]": "175.gif", "[太阳]": "176.gif", "[礼物]": "177.gif", "[拥抱]": "178.gif", "[强]": "179.gif", "[弱]": "180.gif", "[握手]": "181.gif", "[胜利]": "182.gif", "[抱拳]": "183.gif", "[勾引]": "184.gif", "[拳头]": "185.gif", "[差劲]": "186.gif", "[爱你]": "187.gif", "[No]": "188.gif", "[OK]": "189.gif", "[爱情]": "190.gif", "[飞吻]": "191.gif", "[跳跳]": "192.gif", "[发抖]": "193.gif", "[怄火]": "194.gif", "[转圈]": "195.gif", "[磕头]": "196.gif", "[回头]": "197.gif", "[跳绳]": "198.gif", "[投降]": "199.gif", "[激动]": "201.gif", "[乱舞]": "202.gif", "[献吻]": "203.gif", "[左太极]": "204.gif", "[右太极]": "205.gif" } } }, computed: { disabled: function () { return "" === this.thread.tid }, sendButtonDisabled: function () { return 0 === this.inputContent.trim().length }, threadTopic: function () { return this.thread.topic.replace(/\//g, ".") }, show_header: function () { return !0 }, connectedImage: function () { return this.isConnected ? "https://bytedesk.oss-cn-shenzhen.aliyuncs.com/util/connected.png" : "https://bytedesk.oss-cn-shenzhen.aliyuncs.com/util/disconnected.png" }, leaveWordTip: function () { return this.$t("leaveWord") }, nameTip: function () { return this.$t("name") }, inputNameTip: function () { return this.$t("inputName") }, mobileTip: function () { return this.$t("mobile") }, inputMobileTip: function () { return this.$t("inputMobile") }, leaveContentTip: function () { return this.$t("leaveContent") }, emailTip: function () { return this.$t("email") }, inputEmailTip: function () { return this.$t("inputEmail") }, ageTip: function () { return this.$t("age") }, inputAgeTip: function () { return this.$t("inputAge") }, jobTip: function () { return this.$t("job") }, inputJobTip: function () { return this.$t("inputJob") }, pleaseRateTip: function () { return this.$t("pleaseRate") }, veryGoodTip: function () { return this.$t("veryGood") }, goodTip: function () { return this.$t("good") }, averageTip: function () { return this.$t("average") }, notGoodTip: function () { return this.$t("notGood") }, badTip: function () { return this.$t("bad") }, pleaseInputTip: function () { return this.$t("pleaseInput") }, rateTip: function () { return this.$t("rate") }, rateContentTip: function () { return this.$t("rateContent") }, postScriptPrefixTip: function () { return this.$t("postScriptPrefix") } }, methods: { switchAgent: function () { this.showLeaveMessage = !1, this.isRobot = !1, this.requestThread() }, switchLeaveMessage: function () { this.showMessage = !1, this.showInputBar = !1, this.showLeaveMessage = !0 }, switchForm: function () { this.showMessage = !1, this.showInputBar = !1, this.showForm = !0 }, switchRate: function () { this.showMessage = !1, this.showInputBar = !1, this.showRate = !0 }, switchMessage: function () { this.showMessage = !0, this.showInputBar = !0, this.showRate = !1, this.showForm = !1, this.showLeaveMessage = !1 }, switchRobot: function () { console.log("robot"), this.showLeaveMessage = !1, this.isRobot = !0, this.requestRobot() }, imageClicked: function (t) { console.log("image clicked:", t) }, fileClicked: function (t) { }, voiceClicked: function (t) { }, is_self: function (t) { return t.user.uid === this.uid }, is_sending: function (t) { return "sending" === t.status }, is_stored: function (t) { return "stored" === t.status }, is_received: function (t) { return "received" === t.status }, is_error: function (t) { return "error" === t.status }, is_read: function (t) { return "read" === t.status }, is_type_text: function (t) { return "text" === t.type || "notification_thread" === t.type || "notification_auto_close" === t.type }, is_type_robot: function (t) { return "robot" === t.type }, is_type_image: function (t) { return "image" === t.type }, is_type_file: function (t) { return "file" === t.type }, is_type_voice: function (t) { return "voice" === t.type }, is_type_commodity: function (t) { return "commodity" === t.type }, is_type_questionnaire: function (t) { return "questionnaire" === t.type }, is_type_company: function (t) { return "company" === t.type }, is_type_workGroup: function (t) { return "workGroup" === t.type }, is_type_form_request: function (t) { return "notification_form_request" === t.type }, is_type_form_result: function (t) { return "notification_form_result" === t.type }, is_type_thread: function (t) { return "notification_thread" === t.type }, is_type_notification: function (t) { return "notification_preview" !== t.type && "notification_thread" !== t.type && t.type.startsWith("notification") || "commodity" === t.type }, is_type_close: function (t) { return "notification_auto_close" === t.type || "notification_agent_close" === t.type }, is_type_notification_agent_close: function (t) { return "notification_agent_close" === t.type }, is_type_notification_visitor_close: function (t) { return "notification_visitor_close" === t.type }, is_type_notification_auto_close: function (t) { return "notification_auto_close" === t.type }, is_type_notification_thread_reentry: function (t) { return "notification_thread_reentry" === t.type }, is_type_notification_connect: function (t) { return "notification_connect" === t.type }, is_type_notification_disconnect: function (t) { return "notification_disconnect" === t.type }, is_type_notification_offline: function (t) { return "notification_offline" === t.type }, is_type_notification_invite_rate: function (t) { return "notification_invite_rate" === t.type }, is_type_notification_rate_result: function (t) { return "notification_rate_result" === t.type }, my_nickname: function () { return this.nickname.trim().length > 0 ? this.nickname : this.thread.visitor.nickname }, jsonObject: function (t) { return null === t ? '{"categoryCode":"","content":"","id":"0","imageUrl":"","price":"","title":"","type":"commodity","url":""}' : JSON.parse(t) }, replaceFace: function (t) { if (null === t || void 0 === t) return ""; var e = this.emotionMap, i = /\[[\u4E00-\u9FA5NoOK]+\]/g, a = t.match(i), n = t; if (a) for (var s = 0; s < a.length; s++)n = n.replace(a[s], "<img height='25px' width='25px' style='margin-bottom:4px;' src='" + this.emotionBaseUrl + e[a[s]] + "'>"); return n }, handleImageDialogClose: function (t) { t() }, scrollToBottom: function () { var t = this; this.$nextTick(function () { var e = t.$refs.listm; null != e && (e.scrollTop = e.scrollHeight) }) }, pushToMessageArray: function (t) { this.messages.push(t), "image" === t.type && app.$previewRefresh() }, getUrlParam: function (t) { var e = new RegExp("(^|&)" + t + "=([^&]*)(&|$)"), i = window.location.search.substr(1).match(e); return null != i ? decodeURIComponent(i[2]) : null }, requestUsername: function () { this.username = localStorage.bd_kfe_username, this.password = this.username, this.username ? this.login() : $.ajax({ url: this.HTTP_HOST + "/visitor/api/username", contentType: "application/json; charset=utf-8", type: "get", data: { nickname: this.nickname, subDomain: this.subDomain, client: this.client }, success: function (t) { console.log("user:", t.data), app.uid = t.data.uid, app.username = t.data.username, app.password = app.username, app.nickname = t.data.nickname, localStorage.bd_kfe_uid = app.uid, localStorage.bd_kfe_username = app.username, app.login() }, error: function (t) { console.log(t) } }) }, login: function () { $.ajax({ url: this.HTTP_HOST + "/oauth/token", type: "post", data: { username: this.username, password: this.password, grant_type: "password", scope: "all" }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Basic Y2xpZW50OnNlY3JldA==") }, success: function (t) { console.log("login success: ", t), app.access_token = t.access_token, app.requestThread() }, error: function (t) { console.log(t) } }) }, fingerPrint2: function () { var t = DeviceInfo.getDeviceInfo({ domain: "" }); $.ajax({ url: this.HTTP_HOST + "/api/fingerprint2/browser", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ browserInfo: encodeURI(t.browserInfo), deviceType: encodeURI(t.deviceType), fingerprint: encodeURI(t.fingerprint), language: encodeURI(t.language), os: encodeURI(t.os), osVersion: encodeURI(t.osVersion), client: this.client }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { console.log("fingerprint2: ", t) }, error: function (t) { console.log(t) } }) }, browse: function () { var t = window.location.href; t = t.endsWith("#") ? t.substring(0, t.length - 1) : t, $.ajax({ url: this.HTTP_HOST + "/api/browse/notify", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ client: this.client, sessionId: this.sessionId, referrer: encodeURI(document.referrer), url: encodeURI(t), title: encodeURI(document.title) }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { }, error: function (t) { console.log(t) } }) }, manulRequestThread: function () { this.isManulRequestThread = !0, this.requestThread() }, requestThread: function () { $.ajax({ url: this.HTTP_HOST + "/api/thread/request", contentType: "application/json; charset=utf-8", type: "get", data: { wId: this.workGroupWid, type: this.type, aId: this.agentUid, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { console.log("message:", t), app.dealWithThread(t), app.byteDeskConnect() }, error: function (t) { console.log(t) } }) }, requestAgent: function () { console.log("start request agent thread"), $.ajax({ url: this.HTTP_HOST + "/api/thread/request/agent", contentType: "application/json; charset=utf-8", type: "get", data: { wId: this.workGroupWid, type: this.type, aId: this.agentUid, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { console.log("message:", t), app.dealWithThread(t) }, error: function (t) { console.log(t) } }) }, requestRobot: function () { this.initAnswer() }, dealWithThread: function (t) { var e = t.data; 200 === t.status_code ? ((app.isManulRequestThread || "0" === app.loadHistory) && app.pushToMessageArray(e), app.thread = e.thread, app.loadHistoryMessages(), app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.isRobot = !1, app.isThreadClosed = !1, app.appendCommodityInfo()) : 201 === t.status_code ? ((app.isManulRequestThread || "0" === app.loadHistory) && app.pushToMessageArray(e), app.thread = e.thread, app.loadHistoryMessages(), app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.isRobot = !1, app.isThreadClosed = !1, app.appendCommodityInfo()) : 202 === t.status_code ? (app.pushToMessageArray(e), app.thread = e.thread) : 203 === t.status_code ? (app.pushToMessageArray(e), app.leaveMessageTip = e.content, app.thread = e.thread, app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.switchLeaveMessage()) : 204 === t.status_code ? (app.pushToMessageArray(e), app.leaveMessageTip = e.content, app.thread = e.thread, app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.switchLeaveMessage()) : 205 === t.status_code ? (app.pushToMessageArray(e), app.thread = e.thread) : 206 === t.status_code ? ((app.isManulRequestThread || "0" === app.loadHistory) && app.pushToMessageArray(e), app.thread = e.thread, app.loadHistoryMessages(), app.thread.appointed ? app.title = app.thread.agent.nickname : app.title = app.thread.workGroup.nickname, app.isRobot = !0) : -1 === t.status_code ? app.login() : -2 === t.status_code ? app.$toast("siteId或者工作组id错误") : -3 === t.status_code && app.$toast("您已经被禁言"), document.title = app.title, app.scrollToBottom() }, rate: function () { if (this.switchMessage(), app.isRated) return void app.$toast(this.$t("rateAgain")); this.rateValue === this.veryGoodTip ? this.rateScore = 5 : this.rateValue === this.goodTip ? this.rateScore = 4 : this.rateValue === this.averageTip ? this.rateScore = 3 : this.rateValue === this.notGoodTip ? this.rateScore = 2 : this.rateValue === this.badTip && (this.rateScore = 1), $.ajax({ url: this.HTTP_HOST + "/api/rate/do", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ tid: this.thread.tid, score: this.rateScore, note: this.rateContent, invite: this.isInviteRate, client: this.client }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { console.log("rate: ", t), app.isRated = !0 }, error: function (t) { console.log(t) } }) }, upload: function () { console.log("upload"), $("input[id=imagefile]").click() }, uploadChange: function () { console.log("uploadChange"); var t = new FormData; t.append("file_name", this.guid()), t.append("username", this.username), t.append("file", $("input[id=imagefile]")[0].files[0]), t.append("client", this.client), $.ajax({ url: this.HTTP_HOST + "/visitor/api/upload/image", contentType: !1, cache: !1, processData: !1, mimeTypes: "multipart/form-data", type: "post", data: t, success: function (t) { console.log("upload response:", t.data); var e = t.data; app.sendImageMessage(e) }, error: function (t) { console.log(t) } }) }, loadHistoryMessages: function () { this.isManulRequestThread || "0" === this.loadHistory || $.ajax({ url: this.HTTP_HOST + "/api/messages/user", type: "get", data: { uid: this.uid, page: this.page, size: 10, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { for (var e = 0; e < t.data.content.length; e++) { var i = t.data.content[e]; app.messages.unshift(i) } app.scrollToBottom(), app.$previewRefresh() }, error: function (t) { console.log(t) } }) }, initAnswer: function () { $.ajax({ url: this.HTTP_HOST + "/api/answer/init", type: "get", data: { uid: this.adminUid, tid: this.thread.tid, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { if (console.log("init answer success:", t), 200 === t.data.status_code) { var e = t.data; app.pushToMessageArray(e), app.scrollToBottom() } else app.$toast(t.message) }, error: function (t) { console.log("query answers error:", t) } }) }, queryAnswer: function (t) { $.ajax({ url: this.HTTP_HOST + "/api/answer/query", contentType: "application/json; charset=utf-8", type: "get", data: { tid: this.thread.tid, aid: t, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { if (console.log("query answer success:", t), 200 === t.status_code) { var e = t.data.query, i = t.data.reply; app.pushToMessageArray(e), app.pushToMessageArray(i), app.scrollToBottom() } else app.$toast(t.message) }, error: function (t) { console.log("query answers error:", t) } }) }, messageAnswer: function (t) { $.ajax({ url: this.HTTP_HOST + "/api/answer/message", contentType: "application/json; charset=utf-8", type: "get", data: { uid: this.adminUid, tid: this.thread.tid, content: t, client: this.client }, beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (e) { if (console.log("query answer success:", e), 200 === e.status_code || 201 === e.status_code) { var i = e.data.query, a = e.data.reply; app.pushToMessageArray(i), -1 !== t.indexOf("人工") ? app.requestAgent() : app.pushToMessageArray(a), app.scrollToBottom() } else app.$toast(e.data.message) }, error: function (t) { console.log("query answers error:", t) } }) }, getPrechatSettings: function () { "workGroup" === this.type && $.ajax({ url: this.HTTP_HOST + "/visitor/api/prechat/settings", contentType: "application/json; charset=utf-8", type: "get", data: { wid: this.workGroupWid, client: this.client }, success: function (t) { console.log("fetch pre setting success:", t), app.showTopTip = t.data.showTopTip, app.topTip = t.data.topTip, t.data.showForm && (app.showRealname = !0, app.showMobile = !0, app.switchForm()) }, error: function (t) { console.log("fetch pre setting error:", t) } }) }, leaveMessage: function () { return 11 !== this.mobile.trim().length ? void this.$toast("手机号错误") : 0 === this.content.trim().length ? void this.$toast("留言内容不能为空") : (this.switchMessage(), void $.ajax({ url: this.HTTP_HOST + "/api/leavemsg/save", contentType: "application/json; charset=utf-8", dataType: "json", type: "post", data: JSON.stringify({ wid: this.workGroupWid, aid: this.agentUid, type: this.type, mobile: this.mobile, email: "", content: this.content, client: this.client }), beforeSend: function (t) { t.setRequestHeader("Authorization", "Bearer " + app.access_token) }, success: function (t) { console.log("leave message: ", t), 200 === t.status_code ? (app.sendTextMessageSync(app.content), app.$toast("留言成功")) : app.$toast(t.message) }, error: function (t) { console.log(t), app.$toast("留言失败") } })) }, currentTimestamp: function () { return "" }, guid: function () { function t() { return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1) } return t() + t() + "-" + t() + "-" + t() + "-" + t() + "-" + t() + t() + t() }, cancelForm: function () { console.log("cancel form"), this.switchMessage() }, submitForm: function () { console.log("submit form"); var t = JSON.stringify({ form: { realname: this.realname, mobile: this.mobile, email: this.email, age: this.age, job: this.job } }); if (this.mobile.length > 0 && 11 !== this.mobile.length) return void alert("手机号错误"); if (this.age.length > 0 && isNaN(this.age)) return void alert("年龄必须为数字"); var e = this.guid(), i = { mid: e, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_form_result", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, form: { content: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[表单]", nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; app.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(i)), this.switchMessage(), this.showRealname = !1, this.showMobile = !1, this.showEmail = !1, this.showAge = !1, this.showJob = !1 }, sendTextMessageSync: function (t) { if (0 === t.length) return void alert("消息不能为空"); if (t.length >= 500) return void alert("消息长度太长，请分多次发送"); var e = this.guid(), i = { mid: e, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "text", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, text: { content: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: t, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; app.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(i)) }, sendImageMessageSync: function (t) { var e = this.guid(), i = { mid: e, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "image", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, image: { imageUrl: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[图片]", nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; app.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(i)) }, sendCommodityMessageSync: function () { if ("1" === this.getUrlParam("goods")) { var t = this.commodityInfo(), e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "commodity", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, text: { content: t }, thread: { tid: this.thread.tid, type: this.thread.type, content: "[商品]", nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; app.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(e)) } }, appendCommodityInfo: function () { if ("1" === this.getUrlParam("goods")) { var t = this.commodityInfo(), e = { mid: this.guid(), timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "commodity", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, content: t, thread: { tid: this.thread.tid, type: this.thread.type, content: "[商品]", nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; app.pushToMessageArray(e) } }, commodityInfo: function () { var t = { id: this.getUrlParam("goods_id"), title: this.getUrlParam("goods_title"), content: this.getUrlParam("goods_content"), price: this.getUrlParam("goods_price"), url: this.getUrlParam("goods_url"), imageUrl: this.getUrlParam("goods_imageUrl"), categoryCode: this.getUrlParam("goods_categoryCode"), type: "commodity" }; return JSON.stringify(t) }, subscribeTopic: function (t) { this.subscribedTopics.includes(t) || (this.subscribedTopics.push(t), this.stompClient.subscribe("/topic/" + t, function (t) { var e = JSON.parse(t.body); if ("text" === e.type || "image" === e.type || "file" === e.type || "commodity" === e.type) { e.createdAt = e.timestamp, "text" === e.type ? e.content = e.text.content : "image" === e.type ? e.imageUrl = e.image.imageUrl : "commodity" === e.type && (e.content = e.text.content); var i = e.mid; e.user.uid !== app.uid && app.sendReceiptMessage(i, "read") } else if ("notification_browse_invite" === e.type); else if ("notification_queue" === e.type); else if ("notification_queue_accept" === e.type) app.thread = e.thread, app.subscribeTopic(app.threadTopic); else if ("notification_invite_rate" === e.type) app.isInviteRate = !0, app.switchRate(); else if ("notification_agent_close" === e.type || "notification_auto_close" === e.type) e.createdAt = e.timestamp, e.content = e.text.content, app.isThreadClosed = !0; else if ("notification_preview" === e.type) e.user.uid !== app.uid && (app.isInputingVisible = !0, setTimeout(function () { app.isInputingVisible = !1 }, 5e3)); else if ("notification_receipt" === e.type) { if (e.user.uid !== app.uid) for (var a = app.messages.length - 1; a >= 0; a--) { var n = app.messages[a]; if (n.mid === e.receipt.mid) { if ("read" === app.messages[a].status) return; Vue.set(app.messages[a], "status", e.receipt.status) } } } else if ("notification_recall" === e.type) for (var s = 0; s < app.messages.length; s++) { var o = app.messages[s]; o.mid === e.recall.mid && app.messages.splice(s, 1) } else if ("notification_form_request" === e.type) { e.content = "表单请求"; var r = e.extra.content; console.log("form:" + r), -1 !== r.indexOf("姓名") && (console.log("showRealname"), app.showRealname = !0), -1 !== r.indexOf("手机") && (app.showMobile = !0), -1 !== r.indexOf("邮箱") && (app.showEmail = !0), -1 !== r.indexOf("年龄") && (app.showAge = !0), -1 !== r.indexOf("职业") && (app.showJob = !0), app.switchForm() } else "notification_form_result" === e.type && (e.content = "发送表单"); "notification_preview" !== e.type && "notification_receipt" !== e.type && "notification_recall" !== e.type && "notification_form_request" !== e.type && "notification_form_result" !== e.type && "notification_connect" !== e.type && "notification_disconnect" !== e.type ? (app.isRobot = !1, "text" === e.type ? (null != e.content && !e.content.startsWith(app.postScriptPrefixTip) || app.showScript) && app.pushToMessageArray(e) : app.pushToMessageArray(e), app.scrollToBottom()) : console.log(e.type) })) }, onInputChange: function (t) { this.isRobot || this.isThreadClosed || (this.localPreviewContent = t, this.delaySendPreviewMessage()) }, sendPreviewMessage: function () { var t = this.guid(), e = { mid: t, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_preview", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, preview: { content: void 0 === this.localPreviewContent ? " " : this.localPreviewContent }, thread: { tid: this.thread.tid, type: this.thread.type, content: this.localPreviewContent, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(e)) }, onKeyUp: function (t) { 13 === t.keyCode && this.inputContent.trim().length > 0 && (this.inputContent = this.inputContent.trim(), this.sendTextMessage()) }, sendTextMessage: function () { 0 !== this.inputContent.trim().length && (this.isRobot ? this.messageAnswer(this.inputContent) : this.sendTextMessageSync(this.inputContent), this.inputContent = "", setTimeout(function () { $("input")[1].focus() }, 100)) }, sendImageMessage: function (t) { this.sendImageMessageSync(t) }, sendReceiptMessage: function (t, e) { var i = this.guid(), a = { mid: i, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_receipt", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, receipt: { mid: t, status: e }, thread: { tid: this.thread.tid, type: this.thread.type, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(a)) }, sendRecallMessage: function (t) { var e = this.guid(), i = { mid: e, timestamp: this.currentTimestamp(), client: this.client, version: "1", type: "notification_recall", user: { uid: this.uid, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar }, recall: { mid: t }, thread: { tid: this.thread.tid, type: this.thread.type, nickname: this.my_nickname(), avatar: this.thread.visitor.avatar, topic: this.threadTopic, timestamp: this.currentTimestamp(), unreadCount: 0 } }; this.stompClient.send("/app/" + this.threadTopic, {}, JSON.stringify(i)) }, byteDeskConnect: function () { var t = new SockJS(this.STOMP_HOST + "/stomp/?access_token=" + this.access_token); this.stompClient = Stomp.over(t), this.stompClient.reconnect_delay = 1e3, this.stompClient.heartbeat.outgoing = 2e4, this.stompClient.heartbeat.incoming = 2e4, this.IS_PRODUCTION && (this.stompClient.debug = function (t) { }), this.stompClient.connect({}, function (t) { if (app.isConnected = !0, null !== app.thread.tid && void 0 !== app.thread.tid && "" !== app.thread.tid && app.subscribeTopic(app.threadTopic), null !== app.postscript && void 0 !== app.postscript && "" !== app.postscript) { var e = app.postScriptPrefixTip + app.postscript; app.sendTextMessageSync(e) } app.getPrechatSettings() }, function (t) { console.log("连接断开【" + t + "】"), app.isConnected = !1, app.subscribedTopics = [], setTimeout(function () { console.log("reconnecting..."), app.byteDeskConnect() }, 5e3) }) } }, directives: { focus: { inserted: function (t) { t.focus() } } }, created: function () { this.adminUid = this.getUrlParam("uid"), this.workGroupWid = this.getUrlParam("wid"), this.subDomain = this.getUrlParam("sub"), this.type = this.getUrlParam("type"), this.agentUid = this.getUrlParam("aid"), this.nickname = null === this.getUrlParam("nickname") ? "" : this.getUrlParam("nickname"), this.loadHistory = this.getUrlParam("history"), this.postscript = this.getUrlParam("postscript"), this.showScript = "1" === this.getUrlParam("showScript"), this.hideNav = "1" === this.getUrlParam("hidenav"), this.backUrl = null === this.getUrlParam("backurl") || "" === this.getUrlParam("backurl") ? document.referrer : this.getUrlParam("backurl"), this.lang = null === this.getUrlParam("lang") ? "cn" : this.getUrlParam("lang"), this.$i18n.locale = this.lang, console.log("lang:", this.lang), this.uid = localStorage.bd_kfe_uid, this.username = localStorage.bd_kfe_username, this.password = this.username, this.delaySendPreviewMessage = _.debounce(this.sendPreviewMessage, 1500) }, mounted: function () { null !== this.access_token && void 0 !== this.access_token && "" !== this.access_token ? this.login() : (null !== this.username && void 0 !== this.username && this.username, this.requestUsername()), String.prototype.startsWith || (String.prototype.startsWith = function (t, e) { return e = e || 0, this.indexOf(t, e) === e }), String.prototype.includes || (String.prototype.includes = function (t) { var e = !1; return -1 !== this.indexOf(t) && (e = !0), e }), String.prototype.endsWith || (String.prototype.endsWith = function (t) { return -1 !== this.indexOf(t, this.length - t.length) }) } });